INFO:main:Namespace(dataset='igbh-dgl-tiny', dataset_path='/home/runner/MLC/repos/local/cache/get-dataset-igbh_decb9fd7', layout='COO', profile='debug-dgl', scenario='Offline', max_batchsize=1, threads=4, accuracy=False, find_peak_performance=False, backend='dgl', model_name='rgat', output='/home/runner/MLC/repos/local/cache/get-mlperf-inference-results-dir_3eb1d379/test_results/gh_ubuntu-latest_x86-reference-cpu-pytorch-v2.4.0-default_config/rgat/offline/performance/run_1', qps=None, model_path='/home/runner/MLC/repos/local/cache/download-file_5b0d35c7/RGAT/RGAT.pt', dtype='fp32', device='cpu', user_conf='/home/runner/MLC/repos/mlcommons@mlperf-automations/script/generate-mlperf-inference-user-conf/tmp/2195d8b0fc83459abcd86bcd60237b72.conf', audit_conf='audit.config', time=None, count=None, debug=False, performance_sample_count=5000, max_latency=None, samples_per_query=8)
/home/runner/MLC/repos/local/cache/get-git-repo_1a30c411/inference/graph/R-GAT/dgl_utilities/feature_fetching.py:231: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at ../torch/csrc/utils/tensor_numpy.cpp:206.)
  return edge, torch.from_numpy(
/home/runner/MLC/repos/local/cache/get-git-repo_1a30c411/inference/graph/R-GAT/dgl_utilities/feature_fetching.py:312: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  torch.load(
/home/runner/MLC/repos/local/cache/get-git-repo_1a30c411/inference/graph/R-GAT/dgl_utilities/feature_fetching.py:318: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  torch.load(
DGL backend not selected or invalid.  Assuming PyTorch for now.
/home/runner/MLC/repos/local/cache/get-git-repo_1a30c411/inference/graph/R-GAT/backend_dgl.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(ckpt_path, map_location=self.device)
INFO:main:starting TestScenario.Offline
Setting the default backend to "pytorch". You can change it in the ~/.dgl/config.json file or export the DGLBACKEND environment variable.  Valid options are: pytorch, mxnet, tensorflow (all lowercase)
